backend-build:
  stage: build
  image: docker:latest
  services:
    - name: docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker image build --tag $CI_REGISTRY_IMAGE/projectapp-backend:$CI_COMMIT_SHORT_SHA --tag $CI_REGISTRY_IMAGE/projectapp-backend:latest ./backend
    - docker image push $CI_REGISTRY_IMAGE/projectapp-backend:$CI_COMMIT_SHORT_SHA
    - docker image push $CI_REGISTRY_IMAGE/projectapp-backend:latest
    
frontend-build:
  stage: build
  image: docker:latest
  services:
    - name: docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker image build --tag $CI_REGISTRY_IMAGE/projectapp-frontend:$CI_COMMIT_SHORT_SHA --tag $CI_REGISTRY_IMAGE/projectapp-frontend:latest ./frontend
    - docker image push $CI_REGISTRY_IMAGE/projectapp-frontend:$CI_COMMIT_SHORT_SHA
    - docker image push $CI_REGISTRY_IMAGE/projectapp-frontend:latest

frontend-scan-image:
  stage: test
  image: docker:latest
  services:
    - name: docker:dind 
  variables:
    FRONTEND_IMAGE: $CI_REGISTRY_IMAGE/projectapp-frontend:latest
  before_script:
    - apk add --no-cache curl
    - export VERSION=$(curl --silent "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
    - echo $VERSION
    - wget https://github.com/aquasecurity/trivy/releases/download/v${VERSION}/trivy_${VERSION}_Linux-64bit.tar.gz
    - tar zxvf trivy_${VERSION}_Linux-64bit.tar.gz
    - export TRIVY_USERNAME=$CI_REGISTRY_USER
    - export TRIVY_PASSWORD=$CI_REGISTRY_PASSWORD
  allow_failure: true
  script:
    # Build report
    - ./trivy image --exit-code 0 --cache-dir .trivycache/ --no-progress --format template --template "@contrib/gitlab.tpl" -o gl-container-scanning-report.json $FRONTEND_IMAGE
    # Print report
    - ./trivy image --exit-code 0 --cache-dir .trivycache/ --no-progress --severity HIGH $FRONTEND_IMAGE
    # it should fail on high and critical vulnerabilities: --exit-code 1
    - ./trivy image --exit-code 1 --cache-dir .trivycache/ --severity CRITICAL --no-progress $FRONTEND_IMAGE
  cache:
    paths:
      - .trivycache/
  # Enables https://docs.gitlab.com/ee/user/application_security/container_scanning/ (Container Scanning report is available on GitLab EE Ultimate or GitLab.com Gold)
  artifacts:
    reports:
      container_scanning: gl-container-scanning-report.json


backend-scan-image:
  stage: test
  image: docker:latest
  services:
    - name: docker:dind 
  variables:
    BACKEND_IMAGE: $CI_REGISTRY_IMAGE/projectapp-backend:latest
  before_script:
    - apk add --no-cache curl
    - export VERSION=$(curl --silent "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
    - echo $VERSION
    - wget https://github.com/aquasecurity/trivy/releases/download/v${VERSION}/trivy_${VERSION}_Linux-64bit.tar.gz
    - tar zxvf trivy_${VERSION}_Linux-64bit.tar.gz
    - export TRIVY_USERNAME=$CI_REGISTRY_USER
    - export TRIVY_PASSWORD=$CI_REGISTRY_PASSWORD
  allow_failure: true
  script:
    # Build report
    - ./trivy image --exit-code 0 --cache-dir .trivycache/ --no-progress --format template --template "@contrib/gitlab.tpl" -o gl-container-scanning-report.json $BACKEND_IMAGE
    # Print report
    - ./trivy image --exit-code 0 --cache-dir .trivycache/ --no-progress --severity HIGH $BACKEND_IMAGE
    # it should fail on high and critical vulnerabilities: --exit-code 1
    - ./trivy image --exit-code 1 --cache-dir .trivycache/ --severity CRITICAL --no-progress $BACKEND_IMAGE
  cache:
    paths:
      - .trivycache/
  # Enables https://docs.gitlab.com/ee/user/application_security/container_scanning/ (Container Scanning report is available on GitLab EE Ultimate or GitLab.com Gold)
  artifacts:
    reports:
      container_scanning: gl-container-scanning-report.json

deploy-dev:
  stage: deploy
  only:
    - master
  image: dtzar/helm-kubectl
  script:
    - kubectl config set-cluster k8s --server="${SERVER}" --certificate-authority=$CERTIFICATE_AUTHORITY_DATA --embed-certs=true
    - kubectl config set-credentials gitlab --token="${TOKEN}"
    - kubectl config set-context default --cluster=k8s --user=gitlab
    - kubectl config use-context default
    - >
      helm upgrade -f ./helm/values-with-ingress.yaml projectapp ./helm --install 
      --set image.repository=${CI_REGISTRY_IMAGE}/projectapp-frontend 
      --set backend.image.repository=${CI_REGISTRY_IMAGE}/projectapp-backend
      --set image.tag=${CI_COMMIT_SHORT_SHA} --set backend.image.tag=${CI_COMMIT_SHORT_SHA}
      --set ingress.hosts[0].host=dev.projectapp.${INGRESS_IP}.nip.io


deploy-prod:
  stage: deploy
  only:
    - master
  when: manual
  image: dtzar/helm-kubectl
  script:
    - kubectl config set-cluster k8s --server="${SERVER}" --certificate-authority=$CERTIFICATE_AUTHORITY_DATA --embed-certs=true
    - kubectl config set-credentials gitlab --token="${TOKEN}"
    - kubectl config set-context default --cluster=k8s --user=gitlab
    - kubectl config use-context default
    - >
      helm upgrade -f ./helm/values-with-ingress.yaml projectapp-prod ./helm --install
      --create-namespace --namespace prod
      --set image.repository=${CI_REGISTRY_IMAGE}/projectapp-frontend
      --set backend.image.repository=${CI_REGISTRY_IMAGE}/projectapp-backend
      --set image.tag=${CI_COMMIT_SHORT_SHA} --set backend.image.tag=${CI_COMMIT_SHORT_SHA}
      --set ingress.hosts[0].host=projectapp.${INGRESS_IP}.nip.io
      